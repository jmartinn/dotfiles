#!/bin/bash

if [ -f "$HOME/dotfiles/.env" ]; then
    source "$HOME/dotfiles/.env"
fi

# Configuration
CONTENT_DIR="$HOME/blog/content"

# Color codes
COLOR_BOLD="\033[1m"
COLOR_CYAN="\033[36m"
COLOR_GREEN="\033[32m"
COLOR_YELLOW="\033[33m"
COLOR_BLUE="\033[34m"
COLOR_MAGENTA="\033[35m"
COLOR_RESET="\033[0m"

# Utility function to run SQL queries
run_sql() {
  PGPASSWORD=$(echo $DATABASE_URL | cut -d ":" -f 3 | cut -d "@" -f 1)
  PGUSER=$(echo $DATABASE_URL | cut -d "/" -f 3 | cut -d ":" -f 1)
  PGHOST=$(echo $DATABASE_URL | cut -d "@" -f 2 | cut -d ":" -f 1)
  PGPORT=$(echo $DATABASE_URL | cut -d ":" -f 4 | cut -d "/" -f 1)
  PGDATABASE=$(echo $DATABASE_URL | cut -d "/" -f 4 | cut -d "?" -f 1)
  psql "sslmode=require dbname=$PGDATABASE user=$PGUSER password=$PGPASSWORD host=$PGHOST port=$PGPORT" -A -t -c "$1"
}

# Utility function to show the help message
print_usage() {
  echo -e "${COLOR_BOLD}${COLOR_CYAN}Blog Management Script${COLOR_RESET}"
  echo -e "${COLOR_BOLD}Usage:${COLOR_RESET} blog ${COLOR_GREEN}<command>${COLOR_RESET} [${COLOR_YELLOW}slug${COLOR_RESET}] [${COLOR_BLUE}title${COLOR_RESET}]"
  echo
  echo -e "${COLOR_BOLD}Commands:${COLOR_RESET}"
  echo -e "  ${COLOR_GREEN}create${COLOR_RESET}    [${COLOR_YELLOW}slug${COLOR_RESET}] [${COLOR_BLUE}title${COLOR_RESET}]       Create a new blog post with the given slug and title."
  echo -e "  ${COLOR_GREEN}edit${COLOR_RESET}      [${COLOR_YELLOW}slug${COLOR_RESET}]               Edit an existing blog post with the given slug."
  echo -e "  ${COLOR_GREEN}sync${COLOR_RESET}      [${COLOR_YELLOW}slug${COLOR_RESET}]               Sync the blog post with the given slug to the database."
  echo
  echo -e "For more information, run: ${COLOR_MAGENTA}blog <command> --help${COLOR_RESET}"
}

# Utility function to show the help message for a specific command
show_help() {
  case $1 in
    create)
      echo -e "${COLOR_GREEN}create${COLOR_RESET} [${COLOR_YELLOW}slug${COLOR_RESET}] [${COLOR_BLUE}title${COLOR_RESET}]"
      echo -e "    Create a new blog post with the given slug and title."
      ;;
    edit)
      echo -e "${COLOR_GREEN}edit${COLOR_RESET} [${COLOR_YELLOW}slug${COLOR_RESET}]"
      echo -e "    Edit an existing blog post with the given slug. If the post does not exist locally,"
      echo -e "    it will be fetched from the database."
      ;;
    sync)
      echo -e "${COLOR_GREEN}sync${COLOR_RESET} [${COLOR_YELLOW}slug${COLOR_RESET}]"
      echo -e "    Sync the blog post with the given slug to the database. This updates the post"
      echo -e "    with the content from the local markdown file."
      ;;
    *)
      echo -e "Unknown command. Available commands are: ${COLOR_GREEN}create${COLOR_RESET}, ${COLOR_GREEN}edit${COLOR_RESET}, ${COLOR_GREEN}sync${COLOR_RESET}."
      ;;
  esac
}

# Create a new post
create_post() {
  local slug="$1"
  local title="$2"
  local content_file="$CONTENT_DIR/$slug.mdx"

  # Check if the post already exists
  if run_sql "SELECT * FROM posts WHERE slug = '$slug';" | grep -q "$slug"; then
    echo "Post with slug $slug already exists."
    return 1
  fi

  # Create a new markdown file
  touch "$content_file"
  echo "---" > "$content_file"
  echo "title: $title" >> "$content_file"
  echo "publishedAt: $(date '+%Y-%m-%d')" >> "$content_file"
  echo "summary: " >> "$content_file"
  echo "tags: []" >> "$content_file"
  echo "---" >> "$content_file"

  # Open the markdown file in the default editor
  nvim "$content_file"
}

# Edit an existing post or create a local copy from the database if it doesn't exist
edit_post() {
  local slug="$1"
  local content_file="$CONTENT_DIR/$slug.mdx"

  # If the local file does not exist, fetch content from the database
  if [ ! -f "$content_file" ]; then
    echo "No local markdown file found for slug: $slug, fetching from database..."
    
    # Fetch the post content from the database and create a new file
    run_sql "SELECT content FROM posts WHERE slug = '$slug';" > "$content_file"

    if [ ! -s "$content_file" ]; then
      echo "No content fetched from the database for slug: $slug"
      return 1
    fi
  fi

  # Open the markdown file for editing
  nvim "$content_file"
}

# Sync a markdown file with the database
sync_post() {
  local slug="$1"
  local content_file="$CONTENT_DIR/$slug.mdx"

  if [ ! -f "$content_file" ]; then
    echo "No local markdown file found for slug: $slug"
    return 1
  fi

  # Extract the title using awk
  local title=$(awk '/^---$/,/^---$/{ if ($1=="title:") print substr($0, index($0, $2)) }' "$content_file")

  local content=$(<$content_file)

  # Escape backslashes and single quotes for SQL compatibility
  content="${content//\\/\\\\\\}"  # Escape backslashes
  content="${content//\'/''}"      # Properly escape single quotes

  # Sync the content with the database
  run_sql "INSERT INTO posts (slug, title, content) VALUES ('$slug', '$title', '$content') ON CONFLICT (slug) DO UPDATE SET title = EXCLUDED.title, content = EXCLUDED.content;"
}

# Main logic
case "$1" in
  create)
    if [[ "$2" == "--help" ]]; then
        show_help create
    else
        create_post "$2" "$3"
    fi
    ;;
  edit)
    if [[ "$2" == "--help" ]]; then
        show_help edit
    else
        edit_post "$2"
    fi
    ;;
  sync)
    if [[ "$2" == "--help" ]]; then
        show_help sync
    else
        sync_post "$2"
    fi
    ;;
  --help)
    print_usage
    ;;
  *)
    print_usage
    ;;
esac
